!function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);const r={userInputData:document.querySelector("#zipcode"),userInputClick:document.querySelector("#userInput"),insertionPoint:document.querySelector("#insertionPoint")},s={currentDateAndHour(){let e=(new Date).getUTCFullYear(),t=(new Date).getUTCMonth()+1,n=(new Date).getUTCDate(),r=(new Date).getUTCHours();return t<10&&(t="0"+t),n<10&&(n="0"+n),r<10&&(r="0"+r),`${e}-${t}-${n}T${r}:00:00+00:00`},addDays(e){let t=[(new Date).getFullYear(),(new Date).getMonth()+1,(new Date).getDate()],n=new Date(t[0],t[1],0).getDate();return t[2]=t[2]+e,t[2]>n&&(t[1]=t[1]+1,t[2]=t[2]-n),13===t[1]&&(t[0]=t[0]+1,t[1]=1),t},addHours(e,t){let n=parseInt(e.split("-")[0]),r=parseInt(e.split("-")[1]),s=parseInt(e.split("-")[2].split("T")[0]),a=parseInt(e.split("T")[1].split(":")[0]),i=new Date(n,r,0).getDate();return(a+=t)>23&&(s+=1,a-=24),s>i&&(r+=1,s-=i),r>12&&(n+=1,r-=12),r<10&&(r="0"+r),s<10&&(s="0"+s),a<10&&(a="0"+a),`${n}-${r}-${s}T${a}:00:00+00:00`},angleToDirection:e=>0===e?"North":e>0&&e<90?"Northeast":90===e?"East":e>90&&e<180?"Southeast":180===e?"South":e>180&&e<270?"Southwest":270===e?"West":e>270&&e<360?"Northwest":void 0,toMilesPerHour:e=>Math.round(2.2369*e),toFahrenheit:e=>Math.round(1.8*e+32),toTimeZone(e){const t=(new Date).getTimezoneOffset()/60;let n,r=parseInt(e.split("T")[1].split(":")[0]),s=e.split("T")[1].split(":")[1];return(r-=t)<0&&(n=`${r=24+r}:${s} PM`),0===r&&(n=`12:${s} AM`),r>0&&r<12&&(n=`${r}:${s} AM`),12===r&&(n=`12:${s} PM`),r>=13&&(n=`${r-=12}:${s} PM`),n}};let a=(new Date).getDay();function i(e){let t=(new Date).getHours()+e;return t>0&&t<12?t+=" AM":12===t?t="12 PM":t>12&&(t-=12,t+=" PM"),t}a=0===a?"Sunday":1===a?"Monday":2===a?"Tuesday":3===a?"Wednesday":4===a?"Thursday":5===a?"Friday":"Saturday";class o{constructor(e,t,n,r,s,a,i,o,l,u,c,p){this.temperature=e,this.temperatureMaximum=t,this.temperatureMinimum=n,this.weatherHourly=r,this.weatherDaily=s,this.probabilityOfPrecipitation=a,this.humidity=i,this.windDirection=o,this.windSpeed=l,this.sunrise=u,this.sunset=c,this.cityName=p}}function l(e){let t,n,r=[];for(let a=0;r.length<25;a++){t=e[a].validTime.split("/")[1].length>=6?24*parseInt(e[a].validTime.split(""))+parseInt(e[a].validTime.split("T")[2].split("H")[0]):parseInt(e[a].validTime.split("/PT")[1].split("H")[0]);for(let i=0;i<=t-1;i++)n={validTime:s.addHours(e[a].validTime,i),value:e[a].value},r.push(n)}return r}function u(e,t){let n;for(let r=0;r<=e.length-2;r++)e[r].validTime===t&&(n=e[r].value);return n}function c(e){let t,n,r=[];for(let s=0;s<=e.length-1;s++){t=e[s].split(" ");for(let e=0;e<=t.length-1;e++)"Partly"===t[e]&&(n="Partly Cloudy",e=t.length),"Slight"===t[e]&&(n="Cloudy",e=t.length),"Clear"===t[e]&&(n=t[e]),"Sunny"===t[e]&&(n=t[e]),"Cloudy"===t[e]&&(n=t[e]),"Rain"===t[e]&&(n=t[e]),"Snow"===t[e]&&(n=t[e]);r.push(n)}return r}function p(e,t,n,p,d,m){const h=s.toTimeZone(p),g=s.toTimeZone(d);let v=t.periods.map(e=>e.temperature);v.length=6;let $=t.periods.map(e=>e.shortForecast);$.length=6;const y=u(l(n.probabilityOfPrecipitation.values),s.currentDateAndHour()),f=u(l(n.relativeHumidity.values),s.currentDateAndHour()),w=s.angleToDirection(u(l(n.windDirection.values),s.currentDateAndHour())),T=s.toMilesPerHour(u(l(n.windSpeed.values),s.currentDateAndHour()));let D,x=[],M=[],H=[];const P=s.addDays(1);for(let e=0;e<=6;e++)n.maxTemperature.values[e].validTime.split("T")[0]!==`${(new Date).getFullYear()}-${(new Date).getMonth()+1}-${(new Date).getDate()}`&&n.maxTemperature.values[e].validTime.split("T")[0]!==`${P[0]}-${P[1]}-${P[2]}`||(D=!0),!0===D&&x.push(s.toFahrenheit(n.maxTemperature.values[e].value)),6===e&&(D=!1);for(let e=0;e<=6;e++)n.minTemperature.values[e].validTime.split("T")[0]!==`${(new Date).getFullYear()}-${(new Date).getMonth()+1}-${(new Date).getDate()}`&&n.minTemperature.values[e].validTime.split("T")[0]!==`${P[0]}-${P[1]}-${P[2]}`||(D=!0),!0===D&&M.push(s.toFahrenheit(n.minTemperature.values[e].value)),6===e&&(D=!1);for(let t=0;t<=e.periods.length-1;t++)e.periods[t].startTime.split(":")[0]===`${P[0]}-${P[1]}-${P[2]}T06`&&(D=!0),!0===D&&"06"===e.periods[t].startTime.split(":")[0].split("T")[1]&&H.push(e.periods[t].shortForecast),t===e.periods.length-1&&(D=!1);$=c($),H=c(H),function(e){const t=`<div class="container margin">\n  <div class="row">\n    <div class=" s6">\n      <div class="">\n        <img class="main-condition" src="./media/svg/${e.weatherHourly[0].toLowerCase()}.svg" />\n        <h5 class="text-center">${e.weatherHourly[0]}</h5>\n        <h1 class="text-center">${e.temperature[0]}&#176;</h1>\n        <h4 class="text-center">${e.cityName}</h4>\n        <p>\n          ${a}\n          <span class="text-right min">${e.temperatureMinimum[0]}</span>\n          <span class="text-right max">${e.temperatureMaximum[0]}</span>\n        </p>\n      </div>\n      <div class="">\n        <div class="row">\n          <div class="col s2">\n            <p class="text-center">Now</p>\n            <img class="icon" src="./media/svg/${e.weatherHourly[0].toLowerCase()}.svg" />\n            <p class="text-center">${e.temperature[0]}&#176;</p>\n          </div>\n          <div class="col s2">\n            <p class="text-center">${i(1)}</p>\n            <img class="icon" src="./media/svg/${e.weatherHourly[1].toLowerCase()}.svg" />\n            <p class="text-center">${e.temperature[1]}&#176;</p>\n          </div>\n          <div class="col s2">\n            <p class="text-center">${i(2)}</p>\n            <img class="icon" src="./media/svg/${e.weatherHourly[2].toLowerCase()}.svg" />\n            <p class="text-center">${e.temperature[2]}&#176;</p>\n          </div>\n          <div class="col s2">\n            <p class="text-center">${i(3)}</p>\n            <img class="icon" src="./media/svg/${e.weatherHourly[3].toLowerCase()}.svg" />\n            <p class="text-center">${e.temperature[3]}&#176;</p>\n          </div>\n          <div class="col s2">\n            <p class="text-center">${i(4)}</p>\n            <img class="icon" src="./media/svg/${e.weatherHourly[4].toLowerCase()}.svg" />\n            <p class="text-center">${e.temperature[4]}&#176;</p>\n          </div>\n          <div class="col s2">\n            <p class="text-center">${i(5)}</p>\n            <img class="icon" src="./media/svg/${e.weatherHourly[5].toLowerCase()}.svg" />\n            <p class="text-center">${e.temperature[5]}&#176;</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>`;r.insertionPoint.insertAdjacentHTML("beforeend",t)}(new o(v,x,M,$,H,y,f,w,T,h,g,m))}const d={getLocation(){r.userInputClick.addEventListener("click",(async function(e){e.preventDefault();const t=r.userInputData.value.replace(" ","+");try{const e=await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${t}&key=AIzaSyDi9Tn0USjAMQngfVAOQgsyBD9ZiCTuI9w`).then(e=>e.json()),n=e.results[0].geometry.location.lat,r=e.results[0].geometry.location.lng,s=e.results[0].address_components[1].long_name;d.getWeatherLink(n,r,s)}catch{}}))},async getWeatherLink(e,t,n){try{const r=await fetch(`https://api.weather.gov/points/${e},${t}`).then(e=>e.json()),s=r.properties.forecast,a=r.properties.forecastHourly,i=r.properties.forecastGridData;d.getWeather(e,t,s,a,i,n)}catch{}},async getWeather(e,t,n,r,s,a){const i=new Date;try{let o=fetch(n),l=fetch(r),u=fetch(s),c=fetch(`https://api.sunrise-sunset.org/json?lat=${e}&lng=${t}&date=${i.getFullYear()}-${i.getMonth()+1}-${i.getDate()}&formatted=0`);const d=(await Promise.all([o,l,u,c])).map(e=>e.json());[o,l,u,c]=await Promise.all(d),p(o=o.properties,l=l.properties,u=u.properties,c.results.sunrise,c.results.sunset,a)}catch{}}};d.getLocation()}]);